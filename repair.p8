pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

vector={}

function vector:new(x,y)
 local o=setmetatable({},self)
 self.__index=self

 o.x=x
 o.y=y

 return o
end

function vector:__add(v)
 return vector:new(
  self.x+v.x,self.y+v.y
 )
end

function vector:__mul(f)
 return vector:new(
  self.x*f,self.y*f
 )
end

function vector:add(v)
 self.x+=v.x
 self.y+=v.y
end

function vector:sub(v)
 self.x-=v.x
 self.y-=v.y
end

function vector:lerp(v,f)
 self.x=(1-f)*self.x+f*v.x
 self.y=(1-f)*self.y+f*v.y
end

function vector:to_string()
 return "("..self.x..","..self.y..")"
end

function vector:orientation(vref)
 local val=(
  self.y*vref.x-self.x*vref.y
 )
 if val==0 then
  return 0  --co-linear
 elseif val>0 then
  return 1  --clockwise
 else
  return -1 --counter-clockwise
 end
end

dirs={1,2,3,4}
vdirs={
 vector:new(0,-1),
 vector:new(1,0),
 vector:new(0,1),
 vector:new(-1,0)
}

function clkwise(dr)
 return 1+dr%4
end

function cclkwise(dr)
 return 1+(dr+2)%4
end

function opposite(dr)
 return 1+(dr+1)%4
end

function dump_list(l)
 local s=nil
 for i in all(l) do
  if s==nil then
   s="["
  else
   s=s..","
  end
  s=s..i
 end
 s=s.."]"
 printh(s)
end

function rnd_item_from(l)
 return l[ceil(rnd(#l))]
end

col_pals={
 --extract path from tile
 {16* 1,
  16* 2,
  16* 3,
  16* 5,
  16*13,
  16*14},
 --make path grey
 {16* 4+6,
  16* 9+6}
}
function setpal(pal_idx)
 for v in all(
  col_pals[pal_idx]
 ) do
  local dst=band(v,15)
  if dst>0 then
   pal(shr(v,4),band(v,15))
  else
   palt(shr(v,4),true)
  end
 end
end

-->8
-- tiles
gridtile={}
tilesize=13

_nxt_tile_idx=0
function gridtile:new(
 entries,connections,prob,o
)
 o=setmetatable(o or {},self)
 self.__index=self

 o.entries=entries
 o.connections=connections
 o.prob=prob

 o.idx=_nxt_tile_idx
 _nxt_tile_idx+=1

 return o
end

function gridtile:all_entries()
 local l={}
 for d in all(dirs) do
  local bit=shl(1,d-1)
  if band(self.entries,bit)!=0 then
   add(l,d)
  end
 end
 return l
end

-- entry is dir enum
function gridtile:has_entry(
 entry
)
 local bit=shl(1,entry-1)
 return band(
  self.entries,bit
 )!=0
end

function gridtile:exits_from(
 entry
)
 assert(self:has_entry(entry))
 local l={}
 local cons=self.connections[
  entry
 ]
 for d in all(dirs) do
  local bit=shl(1,d-1)
  if band(cons,bit)!=0 then
   add(l,d)
  end
 end
 return l
end

function gridtile:dump()
 printh("idx="..self.idx)
 printh("entries="..self.entries)
 printh("exits=")
 for e in all(self.connections) do
  printh("  "..e)
 end
end

function rnd_tile_from(tiles)
 if #tiles==0 then
  return nil
 end

 local sum=0
 for tile in all(tiles) do
  sum+=tile.prob
 end
 local val=rnd(sum)
 sum=0
 for tile in all(tiles) do
  sum+=tile.prob
  if sum>=val then
   return tile
  end
 end
 assert(false)
end

tiles={
 gridtile:new( 0,{ 0, 0, 0, 0},0),
 gridtile:new( 1,{ 1, 0, 0, 0},1),
 gridtile:new( 2,{ 0, 2, 0, 0},1),
 gridtile:new( 3,{ 2, 1, 0, 0},2),
 gridtile:new( 4,{ 0, 0, 4, 0},1),
 gridtile:new( 5,{ 4, 0, 1, 0},4),
 gridtile:new( 6,{ 0, 4, 2, 0},2),
 gridtile:new( 7,{ 2, 5, 2, 0},2),
 gridtile:new( 8,{ 0, 0, 0, 8},1),
 gridtile:new( 9,{ 8, 0, 0, 1},2),
 gridtile:new(10,{ 0, 8, 0, 2},4),
 gridtile:new(11,{10, 1, 0, 1},2),
 gridtile:new(12,{ 0, 0, 8, 4},2),
 gridtile:new(13,{ 8, 0, 8, 5},2),
 gridtile:new(14,{ 0, 4,10, 4},2),
 gridtile:new(15,{ 4, 8, 1, 2},2)
}

function draw_tile(
 tile,screen_pos
)
 local si=128+tile.idx*2
 if tile.idx>=8 then
  si+=16
 end

 spr(
  si,
  flr(screen_pos.x+0.5),
  flr(screen_pos.y+0.5)
  ,2,2
 )
end

screentile={}

function screentile:new(
 tile,screen_pos,target_pos
)
 local o=setmetatable({},self)
 self.__index=self

 o.tile=tile
 o.pos=screen_pos
 o.target_pos=target_pos

 return o
end

function screentile:update()
 self.pos:lerp(
  self.target_pos,0.2
 )
end

function screentile:draw()
 draw_tile(self.tile,self.pos)
end
-->8
--grid
tilegrid={}

function tilegrid:new()
 local o=setmetatable({},self)
 self.__index=self

 o.w=9
 o.h=7

 o.positions={}
 o.tiles={}
 for x=0,o.w-1 do
  for y=0,o.h-1 do
   local pos=vector:new(x,y)
   add(o.positions,pos)

   local tile_idx=mget(x,y)
   if tile_idx>0 then
    local t=tiles[tile_idx-15]
    local scr_t=screentile:new(
     t,vector:new(64,64)
    )
    tilegrid.place_tile(
     o,scr_t,pos,true
    )
   end
  end
 end

 return o
end

function tilegrid:_pos2idx(pos)
 return pos.x+pos.y*self.w
end

function tilegrid:_idx2pos(idx)
 return vector:new(
  idx%self.w,flr(idx/self.w)
 )
end

function tilegrid:tile_at(pos)
 if (
  pos.x>=0 and pos.x<self.w and
  pos.y>=0 and pos.y<self.h
 ) then
  local screen_tile=self.tiles[
   self:_pos2idx(pos)
  ]
  if screen_tile!=nil then
   return screen_tile.tile
  else
   return nil
  end
 else
  --return the empty tile. this
  --prevents connections off the
  --grid
  return tiles[1]
 end
end

function tilegrid:screen_pos(pos)
 return vector:new(
  pos.x*tilesize+5,
  pos.y*tilesize+22
 )
end

function tilegrid:can_place_tile(
 tile,pos
)
 if tile==nil then
  return false
 end

 if self:tile_at(pos)!=nil then
  return false
 end

 local connects=false
 for dr in all(dirs) do
  local ntile=grid:tile_at(
   pos+vdirs[dr]
  )
  local haspath=tile:has_entry(
   dr
  )
  if (
   ntile!=nil and
   haspath!=ntile:has_entry(
    opposite(dr)
   )
  ) then
   return false
  end
  if haspath and ntile!=nil then
   connects=true
  end
 end

 return connects
end

function tilegrid:is_placeable(
 tile
)
 for p in all(self.positions) do
  if self:can_place_tile(
   tile,p
  ) then
   return true
  end
 end
 return false
end

function tilegrid:place_tile(
 screen_tile,pos,force
)
 assert(
  force or
  self:can_place_tile(
   screen_tile.tile,pos
  )
 )

 screen_tile.target_pos=
  self:screen_pos(pos)
 if screen_tile.pos==nil then
  screen_tile.pos=vector:new(
   screen_tile.target_pos.x,
   screen_tile.target_pos.y
  )
 end

 self.tiles[
  self:_pos2idx(pos)
 ]=screen_tile
end

function tilegrid:update()
 for k,v in pairs(self.tiles) do
  v:update()
 end
end

function tilegrid:draw()
 pal(14,4) --replace pink

 for k,v in pairs(self.tiles) do
  v:draw()
 end

 pal()
end
-->8
-- bot
bot={}

function move_straight(bot,dr)
 return function()
  for i=1,tilesize do
   bot.dirv:add(dr)
   yield()
  end
 end
end

function move_reverse(bot,dr)
 return function()
  local delta=ceil(tilesize/2)

  --move halfway
  for i=1,delta do
   bot.dirv:add(dr)
   yield()
  end

  --turn
  for i=1,8 do
   bot.rot=(bot.rot+1)%16
   yield()
  end

  --move back
  for i=1,delta do
   bot.dirv:sub(dr)
   yield()
  end
 end
end

function move_turn(bot,dr1,dr2)
 return function()
  local o=dr2:orientation(dr1)

  --initial straight bit
  for i=1,3 do
   bot.dirv:add(dr1)
   yield()
  end

  --move diagonally and turn
  for i=1,3 do
   bot.rot=(bot.rot+16+o)%16
   bot.dirv:add(dr1)
   bot.dirv:add(dr2)
   yield()
  end

  --final straight bit
  bot.rot=(bot.rot+16+o)%16
  for i=1,3 do
   bot.dirv:add(dr2)
   yield()
  end
 end
end

function bot:new(pos,o)
 o=setmetatable(o or {},self)
 self.__index=self

 o.period=5

 --coarse grid movement
 o.pos=pos
 local tile=grid:tile_at(pos)
 local entry=rnd_item_from(
  tile:all_entries()
 )
 o.dir=opposite(entry)
 bot.choose_next_dest(o)

 o.clk=0

 return o
end

function bot:switch_move_anim()
 local entry=opposite(self.dir)
 local dirv=vdirs[entry]
 local delta=flr(tilesize/2)

 -- fine-grained drawing state
 self.dirv=dirv*delta
 self.rot=(self.dir-1)*4
 if self.dir==self.nxt_dir then
  self.move_anim=cocreate(
   move_straight(
    self,vdirs[self.dir]
   )
  )
 elseif abs(
  self.dir-self.nxt_dir
 )==2 then
  self.move_anim=cocreate(
   move_reverse(
    self,vdirs[self.dir]
   )
  )
 else
  self.move_anim=cocreate(
   move_turn(
    self,
    vdirs[self.dir],
    vdirs[self.nxt_dir]
   )
  )
 end
end

function bot:choose_next_dest()
 local tile=grid:tile_at(
  self.pos
 )
 self.nxt_dir=rnd_item_from(
  tile:exits_from(
   opposite(self.dir)
  )
 )
 self.nxt_pos=
  self.pos+vdirs[self.nxt_dir]
 self:switch_move_anim()
end

function bot:update()
 self.clk=(self.clk+1)%self.period
 if self.clk>0 then
  return
 end

 assert(coresume(self.move_anim))
 if costatus(
  self.move_anim
 )=="dead" then
  self.pos=self.nxt_pos
  self.dir=self.nxt_dir
  self:choose_next_dest()
 end
end

function bot:draw()
 local si=self.rot%8
 if self.rot>7 then
  --invert rear/front lights
  pal(8,10)
  pal(10,8)
 end
 local pos=grid:screen_pos(
  self.pos
 )
 spr(
  64+si*2,
  pos.x-1+self.dirv.x,
  pos.y-1+self.dirv.y,
  2,2
 )
 pal()
end

-->8
-- tiletray

tiletray={}

function tiletray:new(size)
 local o=setmetatable({},self)
 self.__index=self

 o.size=size

 o.xsep=2
 local w=(
  size*tilesize+(size-1)*o.xsep
 )
 o.x0=63-flr(w/2)

 o.cursor_pos=vector:new(
  o.x0,1
 )

 o.tiles={}
 o.num_tiles=0
 while (o.num_tiles<size) do
  tiletray._replenish(o)
 end

 return o
end

function tiletray:_has_tile(tile)
 for t in all(self.tiles) do
  if t.tile==tile then
   return true
  end
 end
 return false
end

function tiletray:_new_tile()
 local l={}
 for t in all(tiles) do
  if (
   t.prob>0 and
   not self:_has_tile(t) and
   grid:is_placeable(t)
  ) then
   add(l,t)
  end
 end
 return rnd_tile_from(l)
end

function tiletray:_update_target_pos()
 local mul=tilesize+self.xsep
 for i,t in pairs(self.tiles) do
  t.target_pos=vector:new(
   self.x0+(i-1)*mul,1
  )
 end
end

function tiletray:_pop()
 assert(self.num_tiles>0)

 local popped=self.tiles[1]

 for i=1,self.num_tiles-1 do
  self.tiles[i]=self.tiles[i+1]
 end

 self.tiles[self.num_tiles]=nil
 self.num_tiles-=1
 self:_update_target_pos()

 return popped
end

function tiletray:_replenish()
 assert(self.num_tiles<self.size)

 local tile=self:_new_tile()
 if tile==nil then
  return
 end

 for i=self.num_tiles,1,-1 do
  self.tiles[i+1]=self.tiles[i]
 end

 self.tiles[1]=screentile:new(
  tile,
  vector:new(self.x0,-tilesize)
 )
 self.num_tiles+=1
 self:_update_target_pos()
end

function tiletray:switch()
 assert(self.num_tiles>=2)

 local tmp=self.tiles[1]
 for i=1,self.num_tiles-1 do
  self.tiles[i]=self.tiles[i+1]
 end
 self.tiles[self.num_tiles]=tmp

 self:_update_target_pos()
 sfx(0)
end

function tiletray:place_tile(
 pos
)
 grid:place_tile(
  self:_pop(),pos
 )
 self:_replenish()
 sfx(2)
end

function tiletray:selected_tile()
 if self.num_tiles==0 then
  return nil
 else
  return self.tiles[1].tile
 end
end

function tiletray:update()
 foreach(
  self.tiles,
  screentile.update
 )
end

function tiletray:draw()
 pal(14,4) --replace pink
 foreach(
  self.tiles,
  screentile.draw
 )
 pal()

 if #self.tiles>0 then
  draw_cursor(self.cursor_pos)
 end
end
-->8
--cursor

gridcursor={}

function gridcursor:new(pos)
 local o=setmetatable({},self)
 self.__index=self

 o.pos=pos
 o.contraction=0
 o.contraction_clk=0
 gridcursor._update_status(o)

 return o
end

function gridcursor:_update_status()
 self.allowed=grid:can_place_tile(
  tray:selected_tile(),
  self.pos
 )
end

function gridcursor:update()
 local pos=self.pos
 local pos_changed=false
 if btnp(⬅️) then
  pos.x=(pos.x+grid.w-1)%grid.w
  pos_changed=true
 end
 if btnp(➡️) then
  pos.x=(pos.x+1)%grid.w
  pos_changed=true
 end
 if btnp(⬆️) then
  pos.y=(pos.y+grid.h-1)%grid.h
  pos_changed=true
 end
 if btnp(⬇️) then
  pos.y=(pos.y+1)%grid.h
  pos_changed=true
 end

 if pos_changed then
  self:_update_status()
 end

 if btnp(🅾️) then
  if tray.num_tiles>=2 then
   tray:switch()
   self:_update_status()
  else
   sfx(1) --no can do
  end
 end

 if btnp(❎) then
  if self.allowed then
   tray:place_tile(self.pos)
   self.allowed=false
   self.contraction_clk=20
  else
   sfx(1) --no can do
  end
 end

 if self.contraction_clk>0 then
  self.contraction_clk-=1
  self.contraction=(
   0.5-0.5*cos(
    self.contraction_clk/20
   )
  )
 end
end

function draw_cursor(
 pos,contraction
)
 local d=0
 if contraction!=nil then
  d=flr(contraction*4+0.5)
 end
 spr(
  9,pos.x+d,pos.y+d
 )
 spr(
  9,pos.x+5-d,pos.y+d,
  1,1,true
 )
 spr(
  9,pos.x+d,pos.y+5-d,
  1,1,false,true
 )
 spr(
  9,pos.x+5-d,pos.y+5-d,
  1,1,true,true
 )
end

function gridcursor:draw()
 local pos=grid:screen_pos(
  self.pos
 )

 if self.contraction==0 then
  setpal(1) --extract path
  if not self.allowed then
   setpal(2) --grey out path
  end
  draw_tile(
   tray:selected_tile(),pos
  )
  pal()
 end

 draw_cursor(
  pos,self.contraction
 )
end

-->8
-- main

function _init()
 printh("---- init ----")

 grid=tilegrid:new()
 bot1=bot:new(vector:new(0,6))
 tray=tiletray:new(3)
 curs=gridcursor:new(
  vector:new(4,3)
 )

 music(0)
end

function _update()
 bot1:update()
 grid:update()
 curs:update()
 tray:update()
end

function _draw()
 cls()

 grid:draw()
 bot1:draw()
 tray:draw()
 curs:draw()
end

__gfx__
000000000000000000c00000000c00000000c0000000000000c00000000c00000000c00066600000000000000000000000000000000000000000000000000000
000000000caaac0000caa00000cca00000cca0000ccccc00008cc000008cc0000088c00060000000000000000000000000000000000000000000000000000000
007007000ccccc000ccccac00cccca00ccccca0008ccca0008ccccc008cccc00c8cccc0060000000000000000000000000000000000000000000000000000000
000770000ccccc000ccccc00ccccccc008ccca0008ccca0008ccca00ccccccc00ccccc0000000000000000000000000000000000000000000000000000000000
000770000ccccc00c8cccc0008cccc0008ccccc008ccca00ccccca000cccca000ccccac000000000000000000000000000000000000000000000000000000000
007007000c888c000088c000008cc000008cc0000ccccc0000cca00000cca00000caa00000000000000000000000000000000000000000000000000000000000
00000000000000000000c000000c000000c00000000000000000c000000c000000c0000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333330333b333033333330333b333033333330333b333033333330333b333033333330333b333033333330333b333033333330333b333033333330333b3330
33333330333b333033333330333b333033333330333b333033333330333b333033333330333b333033333330333b333033333330333b333033333330333b3330
33333330333b3330333333303333b33033333330333b3330333333303333b3303333333033b333303333333033b3b3303333333033b3333033333330333b3330
33333330333b3330333bbbb033333bb0333b3330333b333033333bb033333bb0bbbb3330bb333330bbbbbbb0bb333bb0bb333330bb333330bb333bb0bbbbbbb0
33333330333333303333333033333330333b3330333b33303333b3303333b3303333333033333330333333303333333033b3333033b3333033b3b330333b3330
33333330333333303333333033333330333b3330333b3330333b3330333b333033333330333333303333333033333330333b3330333b3330333b3330333b3330
33333330333333303333333033333330333b3330333b3330333b3330333b333033333330333333303333333033333330333b3330333b3330333b3330333b3330
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000333b3330000000000000000033333330333b333000000000333b333000000000333b333033333330333b33303333333000000000
000000000000000000000000333b3330000000000000000033333330333b333000000000333b333000000000333b333033333330333b33303333333000000000
000000000000000000000000333b3330000000000000000033333330333b333000000000333b333000000000333b333033333330333b33303333333000000000
000000000000000000000000333bbbb00000000000000000333bbbb0333bbbb000000000bbbb333000000000bbbbbbb0bbbb3330bbbb3330bbbbbbb000000000
000000000000000000000000333333300000000000000000333b3330333b333000000000333333300000000033333330333b3330333b3330333b333000000000
000000000000000000000000333333300000000000000000333b3330333b333000000000333333300000000033333330333b3330333b3330333b333000000000
000000000000000000000000333333300000000000000000333b3330333b333000000000333333300000000033333330333b3330333b3330333b333000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000
000000000000000000000aa000000000000000aca000000000000000aa000000000000000000000000000880000000000000008c800000000000000088000000
000aaaaaaaaa000000000acaa0000000000000ccca0000000000000cca0000000008800000aa0000000008cc00000000000008ccc000000000000088c8000000
000accccccca000000000ccccaa0000000000ccccca0000000000ccccca000000008ccccccca000000008ccccc00000000008ccccc000000000088cccc000000
0000ccccccc000000000cccccccaa0000000ccccccca00000088cccccca000000008ccccccca000000008ccccccaa0000008ccccccc000000088ccccccc00000
0000ccccccc000000000cccccccca000008ccccccccca000008cccccccca00000008ccccccca00000008cccccccca000008ccccccccca000008cccccccc00000
0000ccccccc00000000ccccccccc000008ccccccccccca000008ccccccca00000008ccccccca00000008ccccccca000008ccccccccccca00000ccccccccc0000
0000ccccccc00000008cccccccc00000008ccccccccca0000008cccccccca0000008ccccccca0000008cccccccca0000008ccccccccca0000000cccccccca000
0000ccccccc000000088ccccccc000000008ccccccc0000000008ccccccaa0000008ccccccca00000088cccccca000000000ccccccca00000000cccccccaa000
0008ccccccc80000000088cccc00000000008ccccc00000000008ccccc0000000008ccccccca000000000ccccca0000000000ccccca0000000000ccccaa00000
000888888888000000000088c8000000000008ccc0000000000008cc000000000008800000aa00000000000cca000000000000ccca00000000000acaa0000000
000000000000000000000000880000000000008c800000000000088000000000000000000000000000000000aa000000000000aca000000000000aa000000000
0000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000
000000000000000000000aa000000000000000aca000000000000000aa000000000000000000000000000880000000000000008c800000000000000088000000
000aadddddaa000000000accd0000000000000cccd00000000000000ca0000000008800000aa0000000008c00000000000000dccc0000000000000dcc8000000
000accccccca000000000cccccd0000000000cccccd00000000000ccccd000000008ccccccca00000000dcccc00000000000dccccc0000000000dccccc000000
0000ccccccc0000000000ccccccaa0000000cccccccd00000088ccccccc00000000dcccccccd00000000cccccccaa000000dccccccc000000088cccccc000000
0000ccccccc000000000cccccccca000008ccccccccca000008ccccccccd0000000dcccccccd0000000dcccccccca000008ccccccccca000008cccccccc00000
0000ccccccc000000000ccccccc0000008ccccccccccca00000ccccccccc0000000dcccccccd0000000ccccccccc000008ccccccccccca000000ccccccc00000
0000ccccccc00000008cccccccc00000008ccccccccca000000dcccccccca000000dcccccccd0000008ccccccccd0000008ccccccccca0000000cccccccca000
0000ccccccc000000088cccccc000000000dccccccc000000000cccccccaa000000dcccccccd00000088ccccccc000000000cccccccd000000000ccccccaa000
0008ccccccc800000000dccccc0000000000dccccc0000000000dcccc00000000008ccccccca0000000000ccccd0000000000cccccd0000000000cccccd00000
00088ddddd880000000000dcc800000000000dccc0000000000008c0000000000008800000aa000000000000ca000000000000cccd00000000000accd0000000
000000000000000000000000880000000000008c800000000000088000000000000000000000000000000000aa000000000000aca000000000000aa000000000
0000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111110001111149411111000111111111111100011111494111110001111111111111000111114941111100011111111111110001111149411111000
11111111111110001111149411111000111111111111100011111494111110001111111111111000111114941111100011000111111110001111149411111000
111111111111100011111494111110001111111111111000111114941111100011111111111110001111149411e110001e000e111111100011e1149411111000
111111111111100011111494111110001111111111111000111111494111100011111111111110001111149411e11000110001111111100011e1114941111000
1111111111111000111114941111100011111444111110001111111494111000111114441111100011111494155510001e000e11111110001555111494111000
11111111111110001111499941111000111149994444400011155511494440001111499941111000111114941ddd100011000111114440001111111149444000
111111111111100011114999411110001111499999999000115eee5114999000111149994111100011111494122210001e000e11149990001222111114999000
111111111111100011114999411110001111499944444000115eee51114440001111499941111000111114941ddd100011000111494440001ddd111149444000
111111111111100011111444111110001111144411111000115eee51111110001111149411111000111114941555100011111114941110001555111494111000
111111111111100011111111111110001111111111111000111555111111100011111494111110001111149411e11000111111494111100011e1114941111000
111111111111100011111111111110001111111111111000111111111111100011111494111110001111149411e11000111114941111100011e1149411111000
11111111111110001111111111111000111111111111100011111111111110001111149411111000111114941111100011111494111110001111149411111000
11111111111110001111111111111000111111111111100011111111111110001111149411111000111114941111100011111494111110001111149411111000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111110001111149411111000111111111111100011111494111110001111111111111000111114941111100011111111111110001111149411111000
1111111111111000111114941111100011111e1e1111100011111494111110001111512d51111000111114941111100011111111111110001111149411111000
1111111111111000111114941111100011ee1e1e1ee11000111114941111100011ee512d5ee110001111149411e1100011111111111110001111149411111000
111111111111100011111494111110001111e1e1e111100011114949411110001111512d511110001111494111e1100011111111111110001111149411111000
11111444111110001111494115511000111111111111100011149414941110001111111111111000111494111e11100011111111111110001111149411111000
4444499941111000444494115ee510004444444444444000444941114944400044411111111110004449411111ee100044411111114440004444449444444000
9999999941111000999941115ee51000999999999999900099941111149990009994111111111000999411111e11100099941111149990009999999999999000
444449994111100044441111155110004444444444444000444111111144400044494111111110004449411111ee100044494111494440004444449444444000
11111444111110001111155111111000111111111111100011111111111110001114941111111000111494111e11100011149414941110001111149411111000
111111111111100011115ee5111110001111111111111000111111111111100011114941111110001111494111e1100011114949411110001111149411111000
111111111111100011115ee5111110001111111111111000111111111111100011111494111110001111149411e1100011111494111110001111149411111000
11111111111110001111155111111000111111111111100011111111111110001111149411111000111114941111100011111494111110001111149411111000
11111111111110001111111111111000111111111111100011111111111110001111149411111000111114941111100011111494111110001111149411111000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400004000004444400004000000000444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400049999940049400000004999994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400494444400049400000004944449400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400490000000049400000004940049400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400490000000049400000004940049400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04944449400494444400049400000004944449400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04999999400499999940049400000004999994000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04944449400494444400049400000004944440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400494000000049400000004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400494000000049400000004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400494444400049444440004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940049400049999940004999994004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940004000494444400049444440004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940000000494000000049400000004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04940000000494000000049400000004940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04944444444494444444449444444444944444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
99999999999999999999999999999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444444444444444444444444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
00161c0000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
161d171c00000000150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
15131f1d00000000150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500131d00000000150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
15000000001f0000150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000261c1400161c14140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000027191500272d132d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001500232c1115121d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001b1e1e1b1e1b1e1b1a1a1a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000141517181500271c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000272d2718150027190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000011111318231811000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000400003172438723001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100
000100001917011170091630050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
00040000140701f070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400001005038703001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100
001000000000010050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000100500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000001005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000010050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000100500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000001005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000010050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000100500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000001005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000010050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000100500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000001005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01100000180500c050130400c0501b5403f0001b51012000180400c040130400c0401b5403f0001b51012000180500c050130600c0601b5400c050180500c050180200c050130500c0501b5500c0001b5100c000
011000001b0500f050160400f0511e532240031e512240051b0500f050160400f0511e532210001e512220001b0500f050160400f0511e5320f050160400f0511b0500f050160400f0511e532210001e51222000
012000002b0402b0402b0402b0422b0422b0422b0422c0402b0402b0422b0422b042270402704027042240402a0402a0402a0312a0312a0212a0212a0212a0112a0112a0112a0152a00522000220022200224000
011000002a0402a0402a0312a0312a0212a0212a0212a0112a0112a0112a0152a0052200022002220022400000000000000000000000000000000000000000000000000000000000000000000000000000000000
012000002b0402b0312b0312b0322b0322b0322b03232040300403003130032300322b0402b0312b0322b0322e0402e0412e0312e0312e0212e0212e0212e0112e0112e0112e0112e0153000230002300022b000
011000002e0402e0412e0312e0312e0212e0212e0212e0112e0112e0112e0112e0153000230002300022b00000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000201f100241002712026120241201f120181200010000100001002b120271202612024120201201f12027100261002712026120241201f120181200010000100001002b120271202612024120201201f120
0110002000100001002a1202912027120221201b1200010000100001002e1202a1202912027120231202212000100001002a1202912027120221201b1200010000100001002e1202a12029120271202312022120
011000201f110241102713026130241301f13018130131101f110241102b130271302613024130201301f1301f110241102713026130241301f13018130131101f110241102b130271302613024130201301f130
0110002022110271102a1302913027130221301b1301611022110271102e1302a1302913027130231302213022110271102a1302913027130221301b1301611022110271102e1302a13029130271302313022130
011000200c073000030c0531800318655180030c0530c0530c073000030c05318003186550c0530c043000430c073000030c0531800318655180030c0530c0530c073000030c05318003186550c0530c04300043
011000000c073000030c0031861518655180030c0030c0530c003000030c0531800318655000430c003000430c073000030c003186151865518625186150c0530c003000030c0531800318615186251863518655
__music__
00 10424344
00 11424344
00 11424344
00 10124344
00 11134344
00 10144344
00 11154344
01 10164344
00 11174344
01 10184344
00 11194344
00 10181244
00 11191344
00 10181444
00 11191544
00 1018431a
00 1119431a
00 1052431a
00 1052431b
00 1052121a
00 1153131a
00 1052141a
00 1153151a
00 4118431a
02 4118431a

